knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(DESeq2)
library(tximportData)
library(tximport)
library(readr)
library(pheatmap)
library(RColorBrewer)
source(file = "/home/bobo/Bureau/Git/script/RNAseq/bin/fonction.r")
script.dir="/home/bobo/Bureau/Git/script/RNAseq/"
logs.path <- "/home/bobo/Bureau/Git/result/ALL/QUANTIFICATION/"
logs.files <- list.files(logs.path, pattern = "_*E_run_info.json$", full.names = TRUE)
logs.result <- data.frame()
cols <- c("n_targets", "n_processed", "n_pseudoaligned", "n_unique", "p_pseudoaligned", "p_unique")
for (log in logs.files) {
log.json <- t(as.data.frame(jsonlite::fromJSON(log)))
log.json <- as.data.frame(log.json[cols, ])
colnames(log.json) <- gsub("_run_info.json", "", basename(log))
if (nrow(logs.result) == 0) {
logs.result <- log.json
} else {
logs.result <- cbind(logs.result, log.json)
}
}
logs.result <- as.data.frame(t(logs.result))
logs.result$Sample <- rownames(logs.result)
logs.result$Condition <- "Traited"
logs.result[grep("Untreated", logs.result$Sample, ignore.case = TRUE), "Condition" ] <- "Untreated"
logs.result$Protocol <- "PE"
logs.result[grep("SE", logs.result$Sample, ignore.case = TRUE), "Protocol" ] <- "SE"
logs.pivot <- logs.result %>% pivot_longer(cols = -c(Sample,Condition,Protocol), names_to = "Feature", values_to = "Value")
logs.pivot$Value <- as.numeric(logs.pivot$Value)
tx2gene <- read_csv("/home/bobo/Bureau/Git/script/RNAseq/dependencies/tx2gene.gencode.v27.csv")
count.txi <- tximport(counts.files, type = "kallisto", tx2gene = tx2gene, ignoreAfterBar = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(DESeq2)
library(tximportData)
library(tximport)
library(readr)
library(pheatmap)
library(RColorBrewer)
source(file = "/home/bobo/Bureau/Git/script/RNAseq/bin/fonction.r")
script.dir="/home/bobo/Bureau/Git/script/RNAseq/"
logs.path <- "/home/bobo/Bureau/Git/result/ALL/QUANTIFICATION/"
logs.files <- list.files(logs.path, pattern = "_*E_run_info.json$", full.names = TRUE)
logs.result <- data.frame()
cols <- c("n_targets", "n_processed", "n_pseudoaligned", "n_unique", "p_pseudoaligned", "p_unique")
for (log in logs.files) {
log.json <- t(as.data.frame(jsonlite::fromJSON(log)))
log.json <- as.data.frame(log.json[cols, ])
colnames(log.json) <- gsub("_run_info.json", "", basename(log))
if (nrow(logs.result) == 0) {
logs.result <- log.json
} else {
logs.result <- cbind(logs.result, log.json)
}
}
logs.result <- as.data.frame(t(logs.result))
logs.result$Sample <- rownames(logs.result)
logs.result$Condition <- "Traited"
logs.result[grep("Untreated", logs.result$Sample, ignore.case = TRUE), "Condition" ] <- "Untreated"
logs.result$Protocol <- "PE"
logs.result[grep("SE", logs.result$Sample, ignore.case = TRUE), "Protocol" ] <- "SE"
logs.pivot <- logs.result %>% pivot_longer(cols = -c(Sample,Condition,Protocol), names_to = "Feature", values_to = "Value")
logs.pivot$Value <- as.numeric(logs.pivot$Value)
for (col in cols) {
cat("### ", col, "\n\n")
logs.subset <- logs.pivot %>% filter(Feature == col)
print(ggplot(logs.subset) +
aes(x = Protocol, y = Value) +
geom_boxplot() +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(vars(Feature), scales = "free"))
cat("\n\n")
}
for (col in cols) {
cat("### ", col, "\n\n")
logs.subset <- logs.pivot %>% filter(Feature == col)
moyennes <- logs.subset %>% group_by(Protocol) %>% summarise(moyenne = mean(Value, na.rm = TRUE))
print(ggplot(logs.subset) + aes(x = Protocol, y = Value, fill = Condition) +
geom_boxplot() +
#geom_hline(data = moyennes, aes(yintercept = moyenne, color = Protocol), linetype = "dashed", size = 1) +
scale_fill_hue(direction = 1) +
theme_minimal() +
facet_wrap(vars(Feature), scales = "free") +
labs(color = "Moyenne par protocole"))
cat("\n\n")
}
counts.path <- "/home/bobo/Bureau/Git/result/res/"
counts.files <- list.files(counts.path, pattern = "_*E_abundance.tsv", full.names = TRUE)
counts.result <- data.frame()
#names(counts.files) <- c(
#  "Treated1_PE", "Treated1_SE", "Treated2_PE", "Treated2_SE", "Treated3_PE", "Treated3_SE", "Treated4_PE", "Treated4_SE",
#  "Untreated1_PE", "Untreated1_SE", "Untreated2_PE", "Untreated2_SE", "Untreated3_PE", "Untreated3_SE", "Untreated4_PE", "Untreated4_SE"
#)
counts.path <- "/home/bobo/Bureau/Git/result/ALL/QUANTIFICATION/"
counts.files <- list.files(counts.path, pattern = "_*E_abundance.tsv", full.names = TRUE)
counts.result <- data.frame()
#names(counts.files) <- c(
#  "Treated1_PE", "Treated1_SE", "Treated2_PE", "Treated2_SE", "Treated3_PE", "Treated3_SE", "Treated4_PE", "Treated4_SE",
#  "Untreated1_PE", "Untreated1_SE", "Untreated2_PE", "Untreated2_SE", "Untreated3_PE", "Untreated3_SE", "Untreated4_PE", "Untreated4_SE"
#)
tx2gene <- read_csv("/home/bobo/Bureau/Git/script/RNAseq/dependencies/tx2gene.gencode.v27.csv")
count.txi <- tximport(counts.files, type = "kallisto", tx2gene = tx2gene, ignoreAfterBar = TRUE)
#metadata <- data.frame(
#  sample = c(
#    "Treated1_PE", "Treated1_SE", "Treated2_PE", "Treated2_SE", "Treated3_PE", "Treated3_SE", "Treated4_PE", "Treated4_SE",
#    "Untreated1_PE", "Untreated1_SE", "Untreated2_PE", "Untreated2_SE", "Untreated3_PE", "Untreated3_SE", "Untreated4_PE", "Untreated4_SE"
#  ),
#  condition = factor(c(rep("Treated",8),rep("Untreated",8) )),
#  protocol = factor(rep(c("PE", "SE"), 8))
#)
#rownames(metadata) <- colnames(count.txi$counts)
metadata <- read_csv(file = "/home/bobo/Bureau/Git/script/RNAseq/dependencies/metadata.csv")
names(counts.files) <- metadata$sample
colnames(count.txi$counts) <- metadata$sample
write_csv(as.data.frame(count.txi$counts), "/home/bobo/Bureau/Git/script/RNAseq/result/all_count.csv")
